#+Time-stamp: <2021-07-29T14:14:01>
#+title: Automating Q!365 projects - A workflow example
#+author: Leonie Bachem
#+email: leonie.bachem@qkom.de
#+options: num:nil author:nil ^:t
#+property: header-args :noweb yes :mkdirp yes
#+language: en
#+latex_header_extra: \setlength{\parindent}{0}
#+date: \today

This is an example showing how to automate folder creation via
triggers on Account Object creation/update.

It is recommended to write a project readme documenting the values
used to configure your Q!365 instance.

* Prerequisites

1. Microsoft Azure
2. Microsoft 365
3. Salesforce
4. [[https://developer.salesforce.com/tools/sfdxcli][Salesforce CLI (sfdx)]]

* Setting Up

Install Q!365 in your Salesforce Org and set it up according to the
Q!365 Admin Documentation.

** SFDX

Navigate to your workspace folder via CLI, and execute:
#+begin_src shell
sfdx force:project:create -p pkg -n $project
#+end_src
where =$project= is the name of the directory for your project
files.

Enter the directory:
#+begin_src shell
cd $project
#+end_src

It is recommended to use git for version control.  Initialize a git
repository and connect it to github with:
 #+begin_src shell
git init
git remote add origin git@github.com:$organization/$project.git
 #+end_src

Connect the sfdx Project with your Salesforce Org:
#+begin_src shell
sfdx auth:web:login -a $project -r https://test.salesforce.com
sfdx force:config:set defaultusername=$project
#+end_src

From now on, opening the Salesforce Org via sfdx should work:
#+begin_src shell
sfdx force:org:open
#+end_src

Optionally only generate the login link, for manual copy-pasting:
#+begin_src shell
sfdx force:org:open -r
#+end_src

* Automation Workflow

** [[https://developer.microsoft.com/en-us/graph/graph-explorer][Microsoft Graph Explorer]]

for executing HTTP requests

#+begin_center
Make sure to Sign In to your Account, and set permission
=Sites.ReadWrite.All= via =...= > =Select permissions=
#+end_center

Run query:
#+begin_quote
GET [[https://graph.microsoft.com/v1.0/sites?search=][https://graph.microsoft.com/v1.0/sites?search=]]
#+end_quote

The Response preview-window should contain the Sharepoint Site Id in
the form of:
 #+begin_src
company.sharepoint.com,some-alphanumerics-with-dashes,some-alphanumerics-with-dashes
 #+end_src

Using the Sharepoint Site Id, acquire the Drive Id with:
#+begin_quote
GET [[https://graph.microsoft.com/v1.0/sites/SITEID/drives][https://graph.microsoft.com/v1.0/sites/{site-id}/drives]]
#+end_quote

Using the Drive Id, acquire the Accounts Id:
#+begin_quote
GET [[https://graph.microsoft.com/v1.0/drives/DRIVEID/root/children][https://graph.microsoft.com/v1.0/drives/{drive-id}/root/children]]
#+end_quote

** [[https://YOURSALESFORCEURL.lightning.force.com/lightning/setup/CustomSettings/home][Salesforce]]

The Service Account can be configured under =Setup= > =Home= > =Named Credentials=

Navigate to =Setup= > =Home= > =Custom Settings= > =New= to create a
new Custom Settings object, name it =Q365_Project_Settings=.

On this Custom Settings Object, create new Custom Fields of type Text
with a length of 255 and the following Field Labels:
1. Template Drive
2. Template Accounts
3. Destination Root
4. Destination Drive
5. Destination Accounts

#+begin_comment
Also create a Custom Field for the Q!365 Service Account, if needed:
=Q365Service=
#+end_comment

Populate the Field Labels via the =Manage= button on the Object with the
appropriate Ids from GraphExplorer.  Destination Root can be set to
the string 'root' for simple use cases.

** SFDX

Download the Custom Object definition:
#+begin_src shell
sfdx force:source:retrieve -m 'CustomObject: Q365_Project_Settings__c'
#+end_src

Create Apex classes for configuration and directory creation:
#+begin_src shell
sfdx force:apex:class:create -d pkg/main/default/classes -n SharepointConfig
sfdx force:apex:class:create -d pkg/main/default/classes -n SharepointUtilities
sfdx force:apex:class:create -d pkg/main/default/classes -n SharepointFoldersCtrl
#+end_src

Create Apex Triggers for the Sharepoint Folders to be used as template
structures:
#+begin_src shell
sfdx force:apex:trigger:create -d pkg/main/default/triggers -n SharepointFoldersAccounts
#+end_src

See the respective files in this repository for code examples.

Create a =$project/package.xml= file detailing your changes.

Deploy your changes to the org with:
#+begin_src shell
sfdx force:source:deploy -x package.xml
#+end_src

If deployment fails, it does so detailing the errors responsible.
Iterate fixing them until deployment succeeds.

If using git for version control, commit your changes.

#+begin_latex
\pagebreak
#+end_latex

* Tips

List all SFDX commands:
#+begin_src shell
sfdx commands
#+end_src

Show help for SFDX command COMMAND:
#+begin_src shell
sfdx help COMMAND
#+end_src

#+begin_src shell
sfdx auth:list
#+end_src

#+begin_src shell
sfdx config:list
#+end_src

#+begin_src shell
sfdx force:org:list
#+end_src
